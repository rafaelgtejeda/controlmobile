// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'orm_base.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Cliente.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Cliente TABLE
class TableCliente extends SqfEntityTableBase {
  TableCliente() {
    // declare properties of EntityTable
    tableName = 'clientes';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('apiId', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('empresaId', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('nome_razaosocial', DbType.text, isNotNull: false),
      SqfEntityFieldBase('nomeFantasia', DbType.text, isNotNull: false),
      SqfEntityFieldBase('cnpJCPF', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pessoa', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('email', DbType.text, isNotNull: false),
      SqfEntityFieldBase('ddiTelefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dddTelefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('telefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('ddiCelular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dddCelular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('celular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('cep', DbType.text, isNotNull: false),
      SqfEntityFieldBase('endereco', DbType.text, isNotNull: false),
      SqfEntityFieldBase('numero', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bairro', DbType.text, isNotNull: false),
      SqfEntityFieldBase('complemento', DbType.text, isNotNull: false),
      SqfEntityFieldBase('cidade', DbType.text, isNotNull: false),
      SqfEntityFieldBase('uf', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataCadastro', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataAtualizacao', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataDeletado', DbType.text, isNotNull: false),
      SqfEntityFieldBase('isSelected', DbType.bool,
          defaultValue: false, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCliente();
  }
}

// Orcamento TABLE
class TableOrcamento extends SqfEntityTableBase {
  TableOrcamento() {
    // declare properties of EntityTable
    tableName = 'orcamento';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('apiId', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('empresaId', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('clienteId', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('vendedorId', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('observacao', DbType.text, isNotNull: false),
      SqfEntityFieldBase('pessoa', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('email', DbType.text, isNotNull: false),
      SqfEntityFieldBase('ddiTelefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dddTelefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('telefone', DbType.text, isNotNull: false),
      SqfEntityFieldBase('ddiCelular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dddCelular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('celular', DbType.text, isNotNull: false),
      SqfEntityFieldBase('cep', DbType.text, isNotNull: false),
      SqfEntityFieldBase('endereco', DbType.text, isNotNull: false),
      SqfEntityFieldBase('numero', DbType.text, isNotNull: false),
      SqfEntityFieldBase('bairro', DbType.text, isNotNull: false),
      SqfEntityFieldBase('complemento', DbType.text, isNotNull: false),
      SqfEntityFieldBase('cidade', DbType.text, isNotNull: false),
      SqfEntityFieldBase('uf', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataCadastro', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataAtualizacao', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataDeletado', DbType.text, isNotNull: false),
      SqfEntityFieldBase('isSelected', DbType.bool,
          defaultValue: false, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOrcamento();
  }
}

// Empresa TABLE
class TableEmpresa extends SqfEntityTableBase {
  TableEmpresa() {
    // declare properties of EntityTable
    tableName = 'empresa';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('apiId', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('nome', DbType.text, isNotNull: false),
      SqfEntityFieldBase('nomeFantasia', DbType.text, isNotNull: false),
      SqfEntityFieldBase('ondeProcuraContato', DbType.integer,
          isNotNull: false),
      SqfEntityFieldBase('ondeProcuraProduto', DbType.integer,
          isNotNull: false),
      SqfEntityFieldBase('dataCadastro', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataAtualizacao', DbType.text, isNotNull: false),
      SqfEntityFieldBase('dataDeletado', DbType.text, isNotNull: false),
      SqfEntityFieldBase('isSelected', DbType.bool,
          defaultValue: false, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableEmpresa();
  }
}

// Controle TABLE
class TableControle extends SqfEntityTableBase {
  TableControle() {
    // declare properties of EntityTable
    tableName = 'controle';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('operacaoId', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('dataControle', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableControle();
  }
}

// Agendador TABLE
class TableAgendador extends SqfEntityTableBase {
  TableAgendador() {
    // declare properties of EntityTable
    tableName = 'agendador';
    primaryKeyName = '';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer,
          isPrimaryKeyField: true, isNotNull: false),
      SqfEntityFieldBase('operacaoId', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('dataCron', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAgendador();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class OfflineDbModel extends SqfEntityModelProvider {
  OfflineDbModel() {
    databaseName = offlineDbModel.databaseName;
    password = offlineDbModel.password;
    dbVersion = offlineDbModel.dbVersion;
    databaseTables = [
      TableCliente.getInstance,
      TableOrcamento.getInstance,
      TableEmpresa.getInstance,
      TableControle.getInstance,
      TableAgendador.getInstance,
    ];

    bundledDatabasePath = offlineDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Cliente
class Cliente {
  Cliente(
      {this.id,
      this.apiId,
      this.empresaId,
      this.nome_razaosocial,
      this.nomeFantasia,
      this.cnpJCPF,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Cliente.withFields(
      this.apiId,
      this.empresaId,
      this.nome_razaosocial,
      this.nomeFantasia,
      this.cnpJCPF,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Cliente.withId(
      this.id,
      this.apiId,
      this.empresaId,
      this.nome_razaosocial,
      this.nomeFantasia,
      this.cnpJCPF,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Cliente.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['apiId'] != null) {
      apiId = int.tryParse(o['apiId'].toString());
    }
    if (o['empresaId'] != null) {
      empresaId = int.tryParse(o['empresaId'].toString());
    }
    if (o['nome_razaosocial'] != null) {
      nome_razaosocial = o['nome_razaosocial'] as String;
    }
    if (o['nomeFantasia'] != null) {
      nomeFantasia = o['nomeFantasia'] as String;
    }
    if (o['cnpJCPF'] != null) {
      cnpJCPF = o['cnpJCPF'] as String;
    }
    if (o['pessoa'] != null) {
      pessoa = int.tryParse(o['pessoa'].toString());
    }
    if (o['email'] != null) {
      email = o['email'] as String;
    }
    if (o['ddiTelefone'] != null) {
      ddiTelefone = o['ddiTelefone'] as String;
    }
    if (o['dddTelefone'] != null) {
      dddTelefone = o['dddTelefone'] as String;
    }
    if (o['telefone'] != null) {
      telefone = o['telefone'] as String;
    }
    if (o['ddiCelular'] != null) {
      ddiCelular = o['ddiCelular'] as String;
    }
    if (o['dddCelular'] != null) {
      dddCelular = o['dddCelular'] as String;
    }
    if (o['celular'] != null) {
      celular = o['celular'] as String;
    }
    if (o['cep'] != null) {
      cep = o['cep'] as String;
    }
    if (o['endereco'] != null) {
      endereco = o['endereco'] as String;
    }
    if (o['numero'] != null) {
      numero = o['numero'] as String;
    }
    if (o['bairro'] != null) {
      bairro = o['bairro'] as String;
    }
    if (o['complemento'] != null) {
      complemento = o['complemento'] as String;
    }
    if (o['cidade'] != null) {
      cidade = o['cidade'] as String;
    }
    if (o['uf'] != null) {
      uf = o['uf'] as String;
    }
    if (o['dataCadastro'] != null) {
      dataCadastro = o['dataCadastro'] as String;
    }
    if (o['dataAtualizacao'] != null) {
      dataAtualizacao = o['dataAtualizacao'] as String;
    }
    if (o['dataDeletado'] != null) {
      dataDeletado = o['dataDeletado'] as String;
    }
    if (o['isSelected'] != null) {
      isSelected = o['isSelected'] == 1 || o['isSelected'] == true;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Cliente)
  int id;
  int apiId;
  int empresaId;
  String nome_razaosocial;
  String nomeFantasia;
  String cnpJCPF;
  int pessoa;
  String email;
  String ddiTelefone;
  String dddTelefone;
  String telefone;
  String ddiCelular;
  String dddCelular;
  String celular;
  String cep;
  String endereco;
  String numero;
  String bairro;
  String complemento;
  String cidade;
  String uf;
  String dataCadastro;
  String dataAtualizacao;
  String dataDeletado;
  bool isSelected;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Cliente)

  static const bool _softDeleteActivated = true;
  ClienteManager __mnCliente;

  ClienteManager get _mnCliente {
    return __mnCliente = __mnCliente ?? ClienteManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (empresaId != null) {
      map['empresaId'] = empresaId;
    }

    if (nome_razaosocial != null) {
      map['nome_razaosocial'] = nome_razaosocial;
    }

    if (nomeFantasia != null) {
      map['nomeFantasia'] = nomeFantasia;
    }

    if (cnpJCPF != null) {
      map['cnpJCPF'] = cnpJCPF;
    }

    if (pessoa != null) {
      map['pessoa'] = pessoa;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (ddiTelefone != null) {
      map['ddiTelefone'] = ddiTelefone;
    }

    if (dddTelefone != null) {
      map['dddTelefone'] = dddTelefone;
    }

    if (telefone != null) {
      map['telefone'] = telefone;
    }

    if (ddiCelular != null) {
      map['ddiCelular'] = ddiCelular;
    }

    if (dddCelular != null) {
      map['dddCelular'] = dddCelular;
    }

    if (celular != null) {
      map['celular'] = celular;
    }

    if (cep != null) {
      map['cep'] = cep;
    }

    if (endereco != null) {
      map['endereco'] = endereco;
    }

    if (numero != null) {
      map['numero'] = numero;
    }

    if (bairro != null) {
      map['bairro'] = bairro;
    }

    if (complemento != null) {
      map['complemento'] = complemento;
    }

    if (cidade != null) {
      map['cidade'] = cidade;
    }

    if (uf != null) {
      map['uf'] = uf;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (empresaId != null) {
      map['empresaId'] = empresaId;
    }

    if (nome_razaosocial != null) {
      map['nome_razaosocial'] = nome_razaosocial;
    }

    if (nomeFantasia != null) {
      map['nomeFantasia'] = nomeFantasia;
    }

    if (cnpJCPF != null) {
      map['cnpJCPF'] = cnpJCPF;
    }

    if (pessoa != null) {
      map['pessoa'] = pessoa;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (ddiTelefone != null) {
      map['ddiTelefone'] = ddiTelefone;
    }

    if (dddTelefone != null) {
      map['dddTelefone'] = dddTelefone;
    }

    if (telefone != null) {
      map['telefone'] = telefone;
    }

    if (ddiCelular != null) {
      map['ddiCelular'] = ddiCelular;
    }

    if (dddCelular != null) {
      map['dddCelular'] = dddCelular;
    }

    if (celular != null) {
      map['celular'] = celular;
    }

    if (cep != null) {
      map['cep'] = cep;
    }

    if (endereco != null) {
      map['endereco'] = endereco;
    }

    if (numero != null) {
      map['numero'] = numero;
    }

    if (bairro != null) {
      map['bairro'] = bairro;
    }

    if (complemento != null) {
      map['complemento'] = complemento;
    }

    if (cidade != null) {
      map['cidade'] = cidade;
    }

    if (uf != null) {
      map['uf'] = uf;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Cliente]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Cliente]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      apiId,
      empresaId,
      nome_razaosocial,
      nomeFantasia,
      cnpJCPF,
      pessoa,
      email,
      ddiTelefone,
      dddTelefone,
      telefone,
      ddiCelular,
      dddCelular,
      celular,
      cep,
      endereco,
      numero,
      bairro,
      complemento,
      cidade,
      uf,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      apiId,
      empresaId,
      nome_razaosocial,
      nomeFantasia,
      cnpJCPF,
      pessoa,
      email,
      ddiTelefone,
      dddTelefone,
      telefone,
      ddiCelular,
      dddCelular,
      celular,
      cep,
      endereco,
      numero,
      bairro,
      complemento,
      cidade,
      uf,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  static Future<List<Cliente>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Cliente.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Cliente>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Cliente>[];
    try {
      objList = list
          .map((cliente) => Cliente.fromMap(cliente as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Cliente.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Cliente>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Cliente> objList = <Cliente>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Cliente.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Cliente by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Cliente if exist, otherwise returns null
  Future<Cliente> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Cliente obj;
    final data = await _mnCliente.getById([id]);
    if (data.length != 0) {
      obj = Cliente.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Cliente) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnCliente.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCliente.update(this);
    }

    return id;
  }

  /// saveAs Cliente. Returns a new Primary Key value of Cliente

  /// <returns>Returns a new Primary Key value of Cliente
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Cliente> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Cliente> clientes) async {
    // final results = _mnCliente.saveAll('INSERT OR REPLACE INTO clientes (id,apiId, empresaId, nome_razaosocial, nomeFantasia, cnpJCPF, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',clientes);
    // return results; removed in sqfentity_gen 1.3.0+6
    await OfflineDbModel().batchStart();
    for (final obj in clientes) {
      await obj.save();
    }
    //    return OfflineDbModel().batchCommit();
    final result = await OfflineDbModel().batchCommit();
    for (int i = 0; i < clientes.length; i++) {
      if (clientes[i].id == null) {
        clientes[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnCliente.rawInsert(
              'INSERT OR REPLACE INTO clientes (id,apiId, empresaId, nome_razaosocial, nomeFantasia, cnpJCPF, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
              [
                id,
                apiId,
                empresaId,
                nome_razaosocial,
                nomeFantasia,
                cnpJCPF,
                pessoa,
                email,
                ddiTelefone,
                dddTelefone,
                telefone,
                ddiCelular,
                dddCelular,
                celular,
                cep,
                endereco,
                numero,
                bairro,
                complemento,
                cidade,
                uf,
                dataCadastro,
                dataAtualizacao,
                dataDeletado,
                isSelected,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Cliente id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Cliente id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Cliente Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Cliente>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Cliente> clientes) async {
    final results = await _mnCliente.rawInsertAll(
        'INSERT OR REPLACE INTO clientes (id,apiId, empresaId, nome_razaosocial, nomeFantasia, cnpJCPF, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        clientes);
    return results;
  }

  /// Deletes Cliente

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Cliente invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnCliente
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCliente.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Cliente>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Cliente invoked (id=$id)');
    {
      return _mnCliente.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ClienteFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ClienteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ClienteFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ClienteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    apiId = apiId ?? 0;
    isSelected = isSelected ?? false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion cliente

// region ClienteField
class ClienteField extends SearchCriteria {
  ClienteField(this.clienteFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ClienteFilterBuilder clienteFB;

  ClienteField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ClienteFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param, SqlSyntax.EQuals,
            clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param, SqlSyntax.NotEQuals,
            clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.EQualsOrNull, clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder isNull() {
    clienteFB._addedBlocks = setCriteria(
        0,
        clienteFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      clienteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          clienteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          clienteFB._addedBlocks);
      _waitingNot = '';
      clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
          clienteFB._addedBlocks.retVal;
    }
    return clienteFB;
  }

  ClienteFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      clienteFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          clienteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          clienteFB._addedBlocks);
      _waitingNot = '';
      clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
          clienteFB._addedBlocks.retVal;
      clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
          clienteFB._addedBlocks.retVal;
    }
    return clienteFB;
  }

  ClienteFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      clienteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          clienteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          clienteFB._addedBlocks);
      _waitingNot = '';
      clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
          clienteFB._addedBlocks.retVal;
    }
    return clienteFB;
  }

  ClienteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      clienteFB._addedBlocks = setCriteria(
          pFirst,
          clienteFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          clienteFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        clienteFB._addedBlocks = setCriteria(pFirst, clienteFB.parameters,
            param, SqlSyntax.LessThan, clienteFB._addedBlocks);
      } else {
        clienteFB._addedBlocks = setCriteria(pFirst, clienteFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, clienteFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        clienteFB._addedBlocks = setCriteria(pLast, clienteFB.parameters, param,
            SqlSyntax.GreaterThan, clienteFB._addedBlocks);
      } else {
        clienteFB._addedBlocks = setCriteria(pLast, clienteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, clienteFB._addedBlocks);
      }
    }
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.GreaterThan, clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param, SqlSyntax.LessThan,
            clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param, SqlSyntax.LessThan,
            clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    clienteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, clienteFB._addedBlocks)
        : setCriteria(pValue, clienteFB.parameters, param,
            SqlSyntax.GreaterThan, clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }

  ClienteFilterBuilder inValues(dynamic pValue) {
    clienteFB._addedBlocks = setCriteria(
        pValue,
        clienteFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        clienteFB._addedBlocks);
    _waitingNot = '';
    clienteFB._addedBlocks.needEndBlock[clienteFB._blockIndex] =
        clienteFB._addedBlocks.retVal;
    return clienteFB;
  }
}
// endregion ClienteField

// region ClienteFilterBuilder
class ClienteFilterBuilder extends SearchCriteria {
  ClienteFilterBuilder(Cliente obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Cliente _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ClienteFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ClienteFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ClienteFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ClienteFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ClienteFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ClienteFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ClienteFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ClienteFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ClienteFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ClienteFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ClienteFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ClienteField setField(ClienteField field, String colName, DbType dbtype) {
    return ClienteField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ClienteField _id;
  ClienteField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ClienteField _apiId;
  ClienteField get apiId {
    return _apiId = setField(_apiId, 'apiId', DbType.integer);
  }

  ClienteField _empresaId;
  ClienteField get empresaId {
    return _empresaId = setField(_empresaId, 'empresaId', DbType.integer);
  }

  ClienteField _nome_razaosocial;
  ClienteField get nome_razaosocial {
    return _nome_razaosocial =
        setField(_nome_razaosocial, 'nome_razaosocial', DbType.text);
  }

  ClienteField _nomeFantasia;
  ClienteField get nomeFantasia {
    return _nomeFantasia = setField(_nomeFantasia, 'nomeFantasia', DbType.text);
  }

  ClienteField _cnpJCPF;
  ClienteField get cnpJCPF {
    return _cnpJCPF = setField(_cnpJCPF, 'cnpJCPF', DbType.text);
  }

  ClienteField _pessoa;
  ClienteField get pessoa {
    return _pessoa = setField(_pessoa, 'pessoa', DbType.integer);
  }

  ClienteField _email;
  ClienteField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  ClienteField _ddiTelefone;
  ClienteField get ddiTelefone {
    return _ddiTelefone = setField(_ddiTelefone, 'ddiTelefone', DbType.text);
  }

  ClienteField _dddTelefone;
  ClienteField get dddTelefone {
    return _dddTelefone = setField(_dddTelefone, 'dddTelefone', DbType.text);
  }

  ClienteField _telefone;
  ClienteField get telefone {
    return _telefone = setField(_telefone, 'telefone', DbType.text);
  }

  ClienteField _ddiCelular;
  ClienteField get ddiCelular {
    return _ddiCelular = setField(_ddiCelular, 'ddiCelular', DbType.text);
  }

  ClienteField _dddCelular;
  ClienteField get dddCelular {
    return _dddCelular = setField(_dddCelular, 'dddCelular', DbType.text);
  }

  ClienteField _celular;
  ClienteField get celular {
    return _celular = setField(_celular, 'celular', DbType.text);
  }

  ClienteField _cep;
  ClienteField get cep {
    return _cep = setField(_cep, 'cep', DbType.text);
  }

  ClienteField _endereco;
  ClienteField get endereco {
    return _endereco = setField(_endereco, 'endereco', DbType.text);
  }

  ClienteField _numero;
  ClienteField get numero {
    return _numero = setField(_numero, 'numero', DbType.text);
  }

  ClienteField _bairro;
  ClienteField get bairro {
    return _bairro = setField(_bairro, 'bairro', DbType.text);
  }

  ClienteField _complemento;
  ClienteField get complemento {
    return _complemento = setField(_complemento, 'complemento', DbType.text);
  }

  ClienteField _cidade;
  ClienteField get cidade {
    return _cidade = setField(_cidade, 'cidade', DbType.text);
  }

  ClienteField _uf;
  ClienteField get uf {
    return _uf = setField(_uf, 'uf', DbType.text);
  }

  ClienteField _dataCadastro;
  ClienteField get dataCadastro {
    return _dataCadastro = setField(_dataCadastro, 'dataCadastro', DbType.text);
  }

  ClienteField _dataAtualizacao;
  ClienteField get dataAtualizacao {
    return _dataAtualizacao =
        setField(_dataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  ClienteField _dataDeletado;
  ClienteField get dataDeletado {
    return _dataDeletado = setField(_dataDeletado, 'dataDeletado', DbType.text);
  }

  ClienteField _isSelected;
  ClienteField get isSelected {
    return _isSelected = setField(_isSelected, 'isSelected', DbType.bool);
  }

  ClienteField _isDeleted;
  ClienteField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Cliente._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Cliente> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Cliente._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCliente.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCliente.delete(qparams);
    }
    return r;
  }

  /// Recover List<Cliente> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Cliente bulk invoked');
    return _obj._mnCliente.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from clientes ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCliente.updateBatch(qparams, values);
  }

  /// This method always returns Cliente Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Cliente>
  Future<Cliente> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCliente.toList(qparams);
    final data = await objFuture;
    Cliente obj;
    if (data.isNotEmpty) {
      obj = Cliente.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Cliente]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) clienteCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final clientesFuture = await _obj._mnCliente.toList(qparams);
    final int count = clientesFuture[0]['CNT'] as int;
    if (clienteCount != null) {
      clienteCount(count);
    }
    return count;
  }

  /// This method returns List<Cliente> [Cliente]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Cliente>
  Future<List<Cliente>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Cliente> clientesData = await Cliente.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return clientesData;
  }

  /// This method returns Json String [Cliente]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Cliente]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Cliente]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCliente.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Cliente]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM clientes WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnCliente.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Cliente]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnCliente.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Cliente.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCliente.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ClienteFilterBuilder

// region ClienteFields
class ClienteFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fApiId;
  static TableField get apiId {
    return _fApiId =
        _fApiId ?? SqlSyntax.setField(_fApiId, 'apiId', DbType.integer);
  }

  static TableField _fEmpresaId;
  static TableField get empresaId {
    return _fEmpresaId = _fEmpresaId ??
        SqlSyntax.setField(_fEmpresaId, 'empresaId', DbType.integer);
  }

  static TableField _fNome_razaosocial;
  static TableField get nome_razaosocial {
    return _fNome_razaosocial = _fNome_razaosocial ??
        SqlSyntax.setField(_fNome_razaosocial, 'nome_razaosocial', DbType.text);
  }

  static TableField _fNomeFantasia;
  static TableField get nomeFantasia {
    return _fNomeFantasia = _fNomeFantasia ??
        SqlSyntax.setField(_fNomeFantasia, 'nomeFantasia', DbType.text);
  }

  static TableField _fCnpJCPF;
  static TableField get cnpJCPF {
    return _fCnpJCPF =
        _fCnpJCPF ?? SqlSyntax.setField(_fCnpJCPF, 'cnpJCPF', DbType.text);
  }

  static TableField _fPessoa;
  static TableField get pessoa {
    return _fPessoa =
        _fPessoa ?? SqlSyntax.setField(_fPessoa, 'pessoa', DbType.integer);
  }

  static TableField _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField _fDdiTelefone;
  static TableField get ddiTelefone {
    return _fDdiTelefone = _fDdiTelefone ??
        SqlSyntax.setField(_fDdiTelefone, 'ddiTelefone', DbType.text);
  }

  static TableField _fDddTelefone;
  static TableField get dddTelefone {
    return _fDddTelefone = _fDddTelefone ??
        SqlSyntax.setField(_fDddTelefone, 'dddTelefone', DbType.text);
  }

  static TableField _fTelefone;
  static TableField get telefone {
    return _fTelefone =
        _fTelefone ?? SqlSyntax.setField(_fTelefone, 'telefone', DbType.text);
  }

  static TableField _fDdiCelular;
  static TableField get ddiCelular {
    return _fDdiCelular = _fDdiCelular ??
        SqlSyntax.setField(_fDdiCelular, 'ddiCelular', DbType.text);
  }

  static TableField _fDddCelular;
  static TableField get dddCelular {
    return _fDddCelular = _fDddCelular ??
        SqlSyntax.setField(_fDddCelular, 'dddCelular', DbType.text);
  }

  static TableField _fCelular;
  static TableField get celular {
    return _fCelular =
        _fCelular ?? SqlSyntax.setField(_fCelular, 'celular', DbType.text);
  }

  static TableField _fCep;
  static TableField get cep {
    return _fCep = _fCep ?? SqlSyntax.setField(_fCep, 'cep', DbType.text);
  }

  static TableField _fEndereco;
  static TableField get endereco {
    return _fEndereco =
        _fEndereco ?? SqlSyntax.setField(_fEndereco, 'endereco', DbType.text);
  }

  static TableField _fNumero;
  static TableField get numero {
    return _fNumero =
        _fNumero ?? SqlSyntax.setField(_fNumero, 'numero', DbType.text);
  }

  static TableField _fBairro;
  static TableField get bairro {
    return _fBairro =
        _fBairro ?? SqlSyntax.setField(_fBairro, 'bairro', DbType.text);
  }

  static TableField _fComplemento;
  static TableField get complemento {
    return _fComplemento = _fComplemento ??
        SqlSyntax.setField(_fComplemento, 'complemento', DbType.text);
  }

  static TableField _fCidade;
  static TableField get cidade {
    return _fCidade =
        _fCidade ?? SqlSyntax.setField(_fCidade, 'cidade', DbType.text);
  }

  static TableField _fUf;
  static TableField get uf {
    return _fUf = _fUf ?? SqlSyntax.setField(_fUf, 'uf', DbType.text);
  }

  static TableField _fDataCadastro;
  static TableField get dataCadastro {
    return _fDataCadastro = _fDataCadastro ??
        SqlSyntax.setField(_fDataCadastro, 'dataCadastro', DbType.text);
  }

  static TableField _fDataAtualizacao;
  static TableField get dataAtualizacao {
    return _fDataAtualizacao = _fDataAtualizacao ??
        SqlSyntax.setField(_fDataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  static TableField _fDataDeletado;
  static TableField get dataDeletado {
    return _fDataDeletado = _fDataDeletado ??
        SqlSyntax.setField(_fDataDeletado, 'dataDeletado', DbType.text);
  }

  static TableField _fIsSelected;
  static TableField get isSelected {
    return _fIsSelected = _fIsSelected ??
        SqlSyntax.setField(_fIsSelected, 'isSelected', DbType.bool);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ClienteFields

//region ClienteManager
class ClienteManager extends SqfEntityProvider {
  ClienteManager()
      : super(OfflineDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'clientes';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ClienteManager
// region Orcamento
class Orcamento {
  Orcamento(
      {this.id,
      this.apiId,
      this.empresaId,
      this.clienteId,
      this.vendedorId,
      this.observacao,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Orcamento.withFields(
      this.apiId,
      this.empresaId,
      this.clienteId,
      this.vendedorId,
      this.observacao,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Orcamento.withId(
      this.id,
      this.apiId,
      this.empresaId,
      this.clienteId,
      this.vendedorId,
      this.observacao,
      this.pessoa,
      this.email,
      this.ddiTelefone,
      this.dddTelefone,
      this.telefone,
      this.ddiCelular,
      this.dddCelular,
      this.celular,
      this.cep,
      this.endereco,
      this.numero,
      this.bairro,
      this.complemento,
      this.cidade,
      this.uf,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Orcamento.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['apiId'] != null) {
      apiId = int.tryParse(o['apiId'].toString());
    }
    if (o['empresaId'] != null) {
      empresaId = int.tryParse(o['empresaId'].toString());
    }
    if (o['clienteId'] != null) {
      clienteId = int.tryParse(o['clienteId'].toString());
    }
    if (o['vendedorId'] != null) {
      vendedorId = int.tryParse(o['vendedorId'].toString());
    }
    if (o['observacao'] != null) {
      observacao = o['observacao'] as String;
    }
    if (o['pessoa'] != null) {
      pessoa = int.tryParse(o['pessoa'].toString());
    }
    if (o['email'] != null) {
      email = o['email'] as String;
    }
    if (o['ddiTelefone'] != null) {
      ddiTelefone = o['ddiTelefone'] as String;
    }
    if (o['dddTelefone'] != null) {
      dddTelefone = o['dddTelefone'] as String;
    }
    if (o['telefone'] != null) {
      telefone = o['telefone'] as String;
    }
    if (o['ddiCelular'] != null) {
      ddiCelular = o['ddiCelular'] as String;
    }
    if (o['dddCelular'] != null) {
      dddCelular = o['dddCelular'] as String;
    }
    if (o['celular'] != null) {
      celular = o['celular'] as String;
    }
    if (o['cep'] != null) {
      cep = o['cep'] as String;
    }
    if (o['endereco'] != null) {
      endereco = o['endereco'] as String;
    }
    if (o['numero'] != null) {
      numero = o['numero'] as String;
    }
    if (o['bairro'] != null) {
      bairro = o['bairro'] as String;
    }
    if (o['complemento'] != null) {
      complemento = o['complemento'] as String;
    }
    if (o['cidade'] != null) {
      cidade = o['cidade'] as String;
    }
    if (o['uf'] != null) {
      uf = o['uf'] as String;
    }
    if (o['dataCadastro'] != null) {
      dataCadastro = o['dataCadastro'] as String;
    }
    if (o['dataAtualizacao'] != null) {
      dataAtualizacao = o['dataAtualizacao'] as String;
    }
    if (o['dataDeletado'] != null) {
      dataDeletado = o['dataDeletado'] as String;
    }
    if (o['isSelected'] != null) {
      isSelected = o['isSelected'] == 1 || o['isSelected'] == true;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Orcamento)
  int id;
  int apiId;
  int empresaId;
  int clienteId;
  int vendedorId;
  String observacao;
  int pessoa;
  String email;
  String ddiTelefone;
  String dddTelefone;
  String telefone;
  String ddiCelular;
  String dddCelular;
  String celular;
  String cep;
  String endereco;
  String numero;
  String bairro;
  String complemento;
  String cidade;
  String uf;
  String dataCadastro;
  String dataAtualizacao;
  String dataDeletado;
  bool isSelected;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Orcamento)

  static const bool _softDeleteActivated = true;
  OrcamentoManager __mnOrcamento;

  OrcamentoManager get _mnOrcamento {
    return __mnOrcamento = __mnOrcamento ?? OrcamentoManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (empresaId != null) {
      map['empresaId'] = empresaId;
    }

    if (clienteId != null) {
      map['clienteId'] = clienteId;
    }

    if (vendedorId != null) {
      map['vendedorId'] = vendedorId;
    }

    if (observacao != null) {
      map['observacao'] = observacao;
    }

    if (pessoa != null) {
      map['pessoa'] = pessoa;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (ddiTelefone != null) {
      map['ddiTelefone'] = ddiTelefone;
    }

    if (dddTelefone != null) {
      map['dddTelefone'] = dddTelefone;
    }

    if (telefone != null) {
      map['telefone'] = telefone;
    }

    if (ddiCelular != null) {
      map['ddiCelular'] = ddiCelular;
    }

    if (dddCelular != null) {
      map['dddCelular'] = dddCelular;
    }

    if (celular != null) {
      map['celular'] = celular;
    }

    if (cep != null) {
      map['cep'] = cep;
    }

    if (endereco != null) {
      map['endereco'] = endereco;
    }

    if (numero != null) {
      map['numero'] = numero;
    }

    if (bairro != null) {
      map['bairro'] = bairro;
    }

    if (complemento != null) {
      map['complemento'] = complemento;
    }

    if (cidade != null) {
      map['cidade'] = cidade;
    }

    if (uf != null) {
      map['uf'] = uf;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (empresaId != null) {
      map['empresaId'] = empresaId;
    }

    if (clienteId != null) {
      map['clienteId'] = clienteId;
    }

    if (vendedorId != null) {
      map['vendedorId'] = vendedorId;
    }

    if (observacao != null) {
      map['observacao'] = observacao;
    }

    if (pessoa != null) {
      map['pessoa'] = pessoa;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (ddiTelefone != null) {
      map['ddiTelefone'] = ddiTelefone;
    }

    if (dddTelefone != null) {
      map['dddTelefone'] = dddTelefone;
    }

    if (telefone != null) {
      map['telefone'] = telefone;
    }

    if (ddiCelular != null) {
      map['ddiCelular'] = ddiCelular;
    }

    if (dddCelular != null) {
      map['dddCelular'] = dddCelular;
    }

    if (celular != null) {
      map['celular'] = celular;
    }

    if (cep != null) {
      map['cep'] = cep;
    }

    if (endereco != null) {
      map['endereco'] = endereco;
    }

    if (numero != null) {
      map['numero'] = numero;
    }

    if (bairro != null) {
      map['bairro'] = bairro;
    }

    if (complemento != null) {
      map['complemento'] = complemento;
    }

    if (cidade != null) {
      map['cidade'] = cidade;
    }

    if (uf != null) {
      map['uf'] = uf;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Orcamento]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Orcamento]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      apiId,
      empresaId,
      clienteId,
      vendedorId,
      observacao,
      pessoa,
      email,
      ddiTelefone,
      dddTelefone,
      telefone,
      ddiCelular,
      dddCelular,
      celular,
      cep,
      endereco,
      numero,
      bairro,
      complemento,
      cidade,
      uf,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      apiId,
      empresaId,
      clienteId,
      vendedorId,
      observacao,
      pessoa,
      email,
      ddiTelefone,
      dddTelefone,
      telefone,
      ddiCelular,
      dddCelular,
      celular,
      cep,
      endereco,
      numero,
      bairro,
      complemento,
      cidade,
      uf,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  static Future<List<Orcamento>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Orcamento.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Orcamento>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Orcamento>[];
    try {
      objList = list
          .map((orcamento) =>
              Orcamento.fromMap(orcamento as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Orcamento.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Orcamento>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Orcamento> objList = <Orcamento>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Orcamento.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Orcamento by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Orcamento if exist, otherwise returns null
  Future<Orcamento> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Orcamento obj;
    final data = await _mnOrcamento.getById([id]);
    if (data.length != 0) {
      obj = Orcamento.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Orcamento) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnOrcamento.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOrcamento.update(this);
    }

    return id;
  }

  /// saveAs Orcamento. Returns a new Primary Key value of Orcamento

  /// <returns>Returns a new Primary Key value of Orcamento
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Orcamento> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Orcamento> orcamentos) async {
    // final results = _mnOrcamento.saveAll('INSERT OR REPLACE INTO orcamento (id,apiId, empresaId, clienteId, vendedorId, observacao, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',orcamentos);
    // return results; removed in sqfentity_gen 1.3.0+6
    await OfflineDbModel().batchStart();
    for (final obj in orcamentos) {
      await obj.save();
    }
    //    return OfflineDbModel().batchCommit();
    final result = await OfflineDbModel().batchCommit();
    for (int i = 0; i < orcamentos.length; i++) {
      if (orcamentos[i].id == null) {
        orcamentos[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnOrcamento.rawInsert(
              'INSERT OR REPLACE INTO orcamento (id,apiId, empresaId, clienteId, vendedorId, observacao, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
              [
                id,
                apiId,
                empresaId,
                clienteId,
                vendedorId,
                observacao,
                pessoa,
                email,
                ddiTelefone,
                dddTelefone,
                telefone,
                ddiCelular,
                dddCelular,
                celular,
                cep,
                endereco,
                numero,
                bairro,
                complemento,
                cidade,
                uf,
                dataCadastro,
                dataAtualizacao,
                dataDeletado,
                isSelected,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Orcamento id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Orcamento id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Orcamento Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Orcamento>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Orcamento> orcamentos) async {
    final results = await _mnOrcamento.rawInsertAll(
        'INSERT OR REPLACE INTO orcamento (id,apiId, empresaId, clienteId, vendedorId, observacao, pessoa, email, ddiTelefone, dddTelefone, telefone, ddiCelular, dddCelular, celular, cep, endereco, numero, bairro, complemento, cidade, uf, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        orcamentos);
    return results;
  }

  /// Deletes Orcamento

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Orcamento invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnOrcamento
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnOrcamento.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Orcamento>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Orcamento invoked (id=$id)');
    {
      return _mnOrcamento.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  OrcamentoFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrcamentoFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  OrcamentoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return OrcamentoFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    apiId = apiId ?? 0;
    isSelected = isSelected ?? false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion orcamento

// region OrcamentoField
class OrcamentoField extends SearchCriteria {
  OrcamentoField(this.orcamentoFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  OrcamentoFilterBuilder orcamentoFB;

  OrcamentoField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  OrcamentoFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param, SqlSyntax.EQuals,
            orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.NotEQuals, orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.EQualsOrNull, orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder isNull() {
    orcamentoFB._addedBlocks = setCriteria(
        0,
        orcamentoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      orcamentoFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          orcamentoFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orcamentoFB._addedBlocks);
      _waitingNot = '';
      orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
          orcamentoFB._addedBlocks.retVal;
    }
    return orcamentoFB;
  }

  OrcamentoFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      orcamentoFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          orcamentoFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orcamentoFB._addedBlocks);
      _waitingNot = '';
      orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
          orcamentoFB._addedBlocks.retVal;
      orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
          orcamentoFB._addedBlocks.retVal;
    }
    return orcamentoFB;
  }

  OrcamentoFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      orcamentoFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          orcamentoFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orcamentoFB._addedBlocks);
      _waitingNot = '';
      orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
          orcamentoFB._addedBlocks.retVal;
    }
    return orcamentoFB;
  }

  OrcamentoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      orcamentoFB._addedBlocks = setCriteria(
          pFirst,
          orcamentoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          orcamentoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        orcamentoFB._addedBlocks = setCriteria(pFirst, orcamentoFB.parameters,
            param, SqlSyntax.LessThan, orcamentoFB._addedBlocks);
      } else {
        orcamentoFB._addedBlocks = setCriteria(pFirst, orcamentoFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, orcamentoFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        orcamentoFB._addedBlocks = setCriteria(pLast, orcamentoFB.parameters,
            param, SqlSyntax.GreaterThan, orcamentoFB._addedBlocks);
      } else {
        orcamentoFB._addedBlocks = setCriteria(pLast, orcamentoFB.parameters,
            param, SqlSyntax.LessThanOrEquals, orcamentoFB._addedBlocks);
      }
    }
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.GreaterThan, orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param, SqlSyntax.LessThan,
            orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param, SqlSyntax.LessThan,
            orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    orcamentoFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, orcamentoFB._addedBlocks)
        : setCriteria(pValue, orcamentoFB.parameters, param,
            SqlSyntax.GreaterThan, orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }

  OrcamentoFilterBuilder inValues(dynamic pValue) {
    orcamentoFB._addedBlocks = setCriteria(
        pValue,
        orcamentoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        orcamentoFB._addedBlocks);
    _waitingNot = '';
    orcamentoFB._addedBlocks.needEndBlock[orcamentoFB._blockIndex] =
        orcamentoFB._addedBlocks.retVal;
    return orcamentoFB;
  }
}
// endregion OrcamentoField

// region OrcamentoFilterBuilder
class OrcamentoFilterBuilder extends SearchCriteria {
  OrcamentoFilterBuilder(Orcamento obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Orcamento _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  OrcamentoFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  OrcamentoFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  OrcamentoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  OrcamentoFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  OrcamentoFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  OrcamentoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  OrcamentoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrcamentoFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrcamentoFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  OrcamentoFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  OrcamentoFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  OrcamentoField setField(OrcamentoField field, String colName, DbType dbtype) {
    return OrcamentoField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  OrcamentoField _id;
  OrcamentoField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  OrcamentoField _apiId;
  OrcamentoField get apiId {
    return _apiId = setField(_apiId, 'apiId', DbType.integer);
  }

  OrcamentoField _empresaId;
  OrcamentoField get empresaId {
    return _empresaId = setField(_empresaId, 'empresaId', DbType.integer);
  }

  OrcamentoField _clienteId;
  OrcamentoField get clienteId {
    return _clienteId = setField(_clienteId, 'clienteId', DbType.integer);
  }

  OrcamentoField _vendedorId;
  OrcamentoField get vendedorId {
    return _vendedorId = setField(_vendedorId, 'vendedorId', DbType.integer);
  }

  OrcamentoField _observacao;
  OrcamentoField get observacao {
    return _observacao = setField(_observacao, 'observacao', DbType.text);
  }

  OrcamentoField _pessoa;
  OrcamentoField get pessoa {
    return _pessoa = setField(_pessoa, 'pessoa', DbType.integer);
  }

  OrcamentoField _email;
  OrcamentoField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  OrcamentoField _ddiTelefone;
  OrcamentoField get ddiTelefone {
    return _ddiTelefone = setField(_ddiTelefone, 'ddiTelefone', DbType.text);
  }

  OrcamentoField _dddTelefone;
  OrcamentoField get dddTelefone {
    return _dddTelefone = setField(_dddTelefone, 'dddTelefone', DbType.text);
  }

  OrcamentoField _telefone;
  OrcamentoField get telefone {
    return _telefone = setField(_telefone, 'telefone', DbType.text);
  }

  OrcamentoField _ddiCelular;
  OrcamentoField get ddiCelular {
    return _ddiCelular = setField(_ddiCelular, 'ddiCelular', DbType.text);
  }

  OrcamentoField _dddCelular;
  OrcamentoField get dddCelular {
    return _dddCelular = setField(_dddCelular, 'dddCelular', DbType.text);
  }

  OrcamentoField _celular;
  OrcamentoField get celular {
    return _celular = setField(_celular, 'celular', DbType.text);
  }

  OrcamentoField _cep;
  OrcamentoField get cep {
    return _cep = setField(_cep, 'cep', DbType.text);
  }

  OrcamentoField _endereco;
  OrcamentoField get endereco {
    return _endereco = setField(_endereco, 'endereco', DbType.text);
  }

  OrcamentoField _numero;
  OrcamentoField get numero {
    return _numero = setField(_numero, 'numero', DbType.text);
  }

  OrcamentoField _bairro;
  OrcamentoField get bairro {
    return _bairro = setField(_bairro, 'bairro', DbType.text);
  }

  OrcamentoField _complemento;
  OrcamentoField get complemento {
    return _complemento = setField(_complemento, 'complemento', DbType.text);
  }

  OrcamentoField _cidade;
  OrcamentoField get cidade {
    return _cidade = setField(_cidade, 'cidade', DbType.text);
  }

  OrcamentoField _uf;
  OrcamentoField get uf {
    return _uf = setField(_uf, 'uf', DbType.text);
  }

  OrcamentoField _dataCadastro;
  OrcamentoField get dataCadastro {
    return _dataCadastro = setField(_dataCadastro, 'dataCadastro', DbType.text);
  }

  OrcamentoField _dataAtualizacao;
  OrcamentoField get dataAtualizacao {
    return _dataAtualizacao =
        setField(_dataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  OrcamentoField _dataDeletado;
  OrcamentoField get dataDeletado {
    return _dataDeletado = setField(_dataDeletado, 'dataDeletado', DbType.text);
  }

  OrcamentoField _isSelected;
  OrcamentoField get isSelected {
    return _isSelected = setField(_isSelected, 'isSelected', DbType.bool);
  }

  OrcamentoField _isDeleted;
  OrcamentoField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Orcamento._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Orcamento> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Orcamento._softDeleteActivated && !hardDelete) {
      r = await _obj._mnOrcamento.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnOrcamento.delete(qparams);
    }
    return r;
  }

  /// Recover List<Orcamento> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Orcamento bulk invoked');
    return _obj._mnOrcamento.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from orcamento ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnOrcamento.updateBatch(qparams, values);
  }

  /// This method always returns Orcamento Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Orcamento>
  Future<Orcamento> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnOrcamento.toList(qparams);
    final data = await objFuture;
    Orcamento obj;
    if (data.isNotEmpty) {
      obj = Orcamento.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Orcamento]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) orcamentoCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final orcamentosFuture = await _obj._mnOrcamento.toList(qparams);
    final int count = orcamentosFuture[0]['CNT'] as int;
    if (orcamentoCount != null) {
      orcamentoCount(count);
    }
    return count;
  }

  /// This method returns List<Orcamento> [Orcamento]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Orcamento>
  Future<List<Orcamento>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Orcamento> orcamentosData = await Orcamento.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return orcamentosData;
  }

  /// This method returns Json String [Orcamento]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Orcamento]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Orcamento]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnOrcamento.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Orcamento]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM orcamento WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnOrcamento.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Orcamento]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnOrcamento.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Orcamento.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnOrcamento.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OrcamentoFilterBuilder

// region OrcamentoFields
class OrcamentoFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fApiId;
  static TableField get apiId {
    return _fApiId =
        _fApiId ?? SqlSyntax.setField(_fApiId, 'apiId', DbType.integer);
  }

  static TableField _fEmpresaId;
  static TableField get empresaId {
    return _fEmpresaId = _fEmpresaId ??
        SqlSyntax.setField(_fEmpresaId, 'empresaId', DbType.integer);
  }

  static TableField _fClienteId;
  static TableField get clienteId {
    return _fClienteId = _fClienteId ??
        SqlSyntax.setField(_fClienteId, 'clienteId', DbType.integer);
  }

  static TableField _fVendedorId;
  static TableField get vendedorId {
    return _fVendedorId = _fVendedorId ??
        SqlSyntax.setField(_fVendedorId, 'vendedorId', DbType.integer);
  }

  static TableField _fObservacao;
  static TableField get observacao {
    return _fObservacao = _fObservacao ??
        SqlSyntax.setField(_fObservacao, 'observacao', DbType.text);
  }

  static TableField _fPessoa;
  static TableField get pessoa {
    return _fPessoa =
        _fPessoa ?? SqlSyntax.setField(_fPessoa, 'pessoa', DbType.integer);
  }

  static TableField _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField _fDdiTelefone;
  static TableField get ddiTelefone {
    return _fDdiTelefone = _fDdiTelefone ??
        SqlSyntax.setField(_fDdiTelefone, 'ddiTelefone', DbType.text);
  }

  static TableField _fDddTelefone;
  static TableField get dddTelefone {
    return _fDddTelefone = _fDddTelefone ??
        SqlSyntax.setField(_fDddTelefone, 'dddTelefone', DbType.text);
  }

  static TableField _fTelefone;
  static TableField get telefone {
    return _fTelefone =
        _fTelefone ?? SqlSyntax.setField(_fTelefone, 'telefone', DbType.text);
  }

  static TableField _fDdiCelular;
  static TableField get ddiCelular {
    return _fDdiCelular = _fDdiCelular ??
        SqlSyntax.setField(_fDdiCelular, 'ddiCelular', DbType.text);
  }

  static TableField _fDddCelular;
  static TableField get dddCelular {
    return _fDddCelular = _fDddCelular ??
        SqlSyntax.setField(_fDddCelular, 'dddCelular', DbType.text);
  }

  static TableField _fCelular;
  static TableField get celular {
    return _fCelular =
        _fCelular ?? SqlSyntax.setField(_fCelular, 'celular', DbType.text);
  }

  static TableField _fCep;
  static TableField get cep {
    return _fCep = _fCep ?? SqlSyntax.setField(_fCep, 'cep', DbType.text);
  }

  static TableField _fEndereco;
  static TableField get endereco {
    return _fEndereco =
        _fEndereco ?? SqlSyntax.setField(_fEndereco, 'endereco', DbType.text);
  }

  static TableField _fNumero;
  static TableField get numero {
    return _fNumero =
        _fNumero ?? SqlSyntax.setField(_fNumero, 'numero', DbType.text);
  }

  static TableField _fBairro;
  static TableField get bairro {
    return _fBairro =
        _fBairro ?? SqlSyntax.setField(_fBairro, 'bairro', DbType.text);
  }

  static TableField _fComplemento;
  static TableField get complemento {
    return _fComplemento = _fComplemento ??
        SqlSyntax.setField(_fComplemento, 'complemento', DbType.text);
  }

  static TableField _fCidade;
  static TableField get cidade {
    return _fCidade =
        _fCidade ?? SqlSyntax.setField(_fCidade, 'cidade', DbType.text);
  }

  static TableField _fUf;
  static TableField get uf {
    return _fUf = _fUf ?? SqlSyntax.setField(_fUf, 'uf', DbType.text);
  }

  static TableField _fDataCadastro;
  static TableField get dataCadastro {
    return _fDataCadastro = _fDataCadastro ??
        SqlSyntax.setField(_fDataCadastro, 'dataCadastro', DbType.text);
  }

  static TableField _fDataAtualizacao;
  static TableField get dataAtualizacao {
    return _fDataAtualizacao = _fDataAtualizacao ??
        SqlSyntax.setField(_fDataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  static TableField _fDataDeletado;
  static TableField get dataDeletado {
    return _fDataDeletado = _fDataDeletado ??
        SqlSyntax.setField(_fDataDeletado, 'dataDeletado', DbType.text);
  }

  static TableField _fIsSelected;
  static TableField get isSelected {
    return _fIsSelected = _fIsSelected ??
        SqlSyntax.setField(_fIsSelected, 'isSelected', DbType.bool);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion OrcamentoFields

//region OrcamentoManager
class OrcamentoManager extends SqfEntityProvider {
  OrcamentoManager()
      : super(OfflineDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'orcamento';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion OrcamentoManager
// region Empresa
class Empresa {
  Empresa(
      {this.id,
      this.apiId,
      this.nome,
      this.nomeFantasia,
      this.ondeProcuraContato,
      this.ondeProcuraProduto,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Empresa.withFields(
      this.apiId,
      this.nome,
      this.nomeFantasia,
      this.ondeProcuraContato,
      this.ondeProcuraProduto,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Empresa.withId(
      this.id,
      this.apiId,
      this.nome,
      this.nomeFantasia,
      this.ondeProcuraContato,
      this.ondeProcuraProduto,
      this.dataCadastro,
      this.dataAtualizacao,
      this.dataDeletado,
      this.isSelected,
      this.isDeleted) {
    _setDefaultValues();
  }
  Empresa.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['apiId'] != null) {
      apiId = int.tryParse(o['apiId'].toString());
    }
    if (o['nome'] != null) {
      nome = o['nome'] as String;
    }
    if (o['nomeFantasia'] != null) {
      nomeFantasia = o['nomeFantasia'] as String;
    }
    if (o['ondeProcuraContato'] != null) {
      ondeProcuraContato = int.tryParse(o['ondeProcuraContato'].toString());
    }
    if (o['ondeProcuraProduto'] != null) {
      ondeProcuraProduto = int.tryParse(o['ondeProcuraProduto'].toString());
    }
    if (o['dataCadastro'] != null) {
      dataCadastro = o['dataCadastro'] as String;
    }
    if (o['dataAtualizacao'] != null) {
      dataAtualizacao = o['dataAtualizacao'] as String;
    }
    if (o['dataDeletado'] != null) {
      dataDeletado = o['dataDeletado'] as String;
    }
    if (o['isSelected'] != null) {
      isSelected = o['isSelected'] == 1 || o['isSelected'] == true;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Empresa)
  int id;
  int apiId;
  String nome;
  String nomeFantasia;
  int ondeProcuraContato;
  int ondeProcuraProduto;
  String dataCadastro;
  String dataAtualizacao;
  String dataDeletado;
  bool isSelected;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Empresa)

  static const bool _softDeleteActivated = true;
  EmpresaManager __mnEmpresa;

  EmpresaManager get _mnEmpresa {
    return __mnEmpresa = __mnEmpresa ?? EmpresaManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (nome != null) {
      map['nome'] = nome;
    }

    if (nomeFantasia != null) {
      map['nomeFantasia'] = nomeFantasia;
    }

    if (ondeProcuraContato != null) {
      map['ondeProcuraContato'] = ondeProcuraContato;
    }

    if (ondeProcuraProduto != null) {
      map['ondeProcuraProduto'] = ondeProcuraProduto;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (apiId != null) {
      map['apiId'] = apiId;
    }

    if (nome != null) {
      map['nome'] = nome;
    }

    if (nomeFantasia != null) {
      map['nomeFantasia'] = nomeFantasia;
    }

    if (ondeProcuraContato != null) {
      map['ondeProcuraContato'] = ondeProcuraContato;
    }

    if (ondeProcuraProduto != null) {
      map['ondeProcuraProduto'] = ondeProcuraProduto;
    }

    if (dataCadastro != null) {
      map['dataCadastro'] = dataCadastro;
    }

    if (dataAtualizacao != null) {
      map['dataAtualizacao'] = dataAtualizacao;
    }

    if (dataDeletado != null) {
      map['dataDeletado'] = dataDeletado;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Empresa]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Empresa]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      apiId,
      nome,
      nomeFantasia,
      ondeProcuraContato,
      ondeProcuraProduto,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      apiId,
      nome,
      nomeFantasia,
      ondeProcuraContato,
      ondeProcuraProduto,
      dataCadastro,
      dataAtualizacao,
      dataDeletado,
      isSelected,
      isDeleted
    ];
  }

  static Future<List<Empresa>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Empresa.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Empresa>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Empresa>[];
    try {
      objList = list
          .map((empresa) => Empresa.fromMap(empresa as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Empresa.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Empresa>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Empresa> objList = <Empresa>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Empresa.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Empresa by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Empresa if exist, otherwise returns null
  Future<Empresa> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Empresa obj;
    final data = await _mnEmpresa.getById([id]);
    if (data.length != 0) {
      obj = Empresa.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Empresa) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnEmpresa.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnEmpresa.update(this);
    }

    return id;
  }

  /// saveAs Empresa. Returns a new Primary Key value of Empresa

  /// <returns>Returns a new Primary Key value of Empresa
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Empresa> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Empresa> empresas) async {
    // final results = _mnEmpresa.saveAll('INSERT OR REPLACE INTO empresa (id,apiId, nome, nomeFantasia, ondeProcuraContato, ondeProcuraProduto, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',empresas);
    // return results; removed in sqfentity_gen 1.3.0+6
    await OfflineDbModel().batchStart();
    for (final obj in empresas) {
      await obj.save();
    }
    //    return OfflineDbModel().batchCommit();
    final result = await OfflineDbModel().batchCommit();
    for (int i = 0; i < empresas.length; i++) {
      if (empresas[i].id == null) {
        empresas[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnEmpresa.rawInsert(
              'INSERT OR REPLACE INTO empresa (id,apiId, nome, nomeFantasia, ondeProcuraContato, ondeProcuraProduto, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
              [
                id,
                apiId,
                nome,
                nomeFantasia,
                ondeProcuraContato,
                ondeProcuraProduto,
                dataCadastro,
                dataAtualizacao,
                dataDeletado,
                isSelected,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Empresa id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Empresa id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Empresa Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Empresa>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Empresa> empresas) async {
    final results = await _mnEmpresa.rawInsertAll(
        'INSERT OR REPLACE INTO empresa (id,apiId, nome, nomeFantasia, ondeProcuraContato, ondeProcuraProduto, dataCadastro, dataAtualizacao, dataDeletado, isSelected,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        empresas);
    return results;
  }

  /// Deletes Empresa

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Empresa invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnEmpresa
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnEmpresa.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Empresa>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Empresa invoked (id=$id)');
    {
      return _mnEmpresa.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  EmpresaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return EmpresaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  EmpresaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return EmpresaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    apiId = apiId ?? 0;
    isSelected = isSelected ?? false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion empresa

// region EmpresaField
class EmpresaField extends SearchCriteria {
  EmpresaField(this.empresaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  EmpresaFilterBuilder empresaFB;

  EmpresaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  EmpresaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param, SqlSyntax.EQuals,
            empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param, SqlSyntax.NotEQuals,
            empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.EQualsOrNull, empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder isNull() {
    empresaFB._addedBlocks = setCriteria(
        0,
        empresaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      empresaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          empresaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          empresaFB._addedBlocks);
      _waitingNot = '';
      empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
          empresaFB._addedBlocks.retVal;
    }
    return empresaFB;
  }

  EmpresaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      empresaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          empresaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          empresaFB._addedBlocks);
      _waitingNot = '';
      empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
          empresaFB._addedBlocks.retVal;
      empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
          empresaFB._addedBlocks.retVal;
    }
    return empresaFB;
  }

  EmpresaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      empresaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          empresaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          empresaFB._addedBlocks);
      _waitingNot = '';
      empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
          empresaFB._addedBlocks.retVal;
    }
    return empresaFB;
  }

  EmpresaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      empresaFB._addedBlocks = setCriteria(
          pFirst,
          empresaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          empresaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        empresaFB._addedBlocks = setCriteria(pFirst, empresaFB.parameters,
            param, SqlSyntax.LessThan, empresaFB._addedBlocks);
      } else {
        empresaFB._addedBlocks = setCriteria(pFirst, empresaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, empresaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        empresaFB._addedBlocks = setCriteria(pLast, empresaFB.parameters, param,
            SqlSyntax.GreaterThan, empresaFB._addedBlocks);
      } else {
        empresaFB._addedBlocks = setCriteria(pLast, empresaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, empresaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.GreaterThan, empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param, SqlSyntax.LessThan,
            empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param, SqlSyntax.LessThan,
            empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    empresaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, empresaFB._addedBlocks)
        : setCriteria(pValue, empresaFB.parameters, param,
            SqlSyntax.GreaterThan, empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }

  EmpresaFilterBuilder inValues(dynamic pValue) {
    empresaFB._addedBlocks = setCriteria(
        pValue,
        empresaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        empresaFB._addedBlocks);
    _waitingNot = '';
    empresaFB._addedBlocks.needEndBlock[empresaFB._blockIndex] =
        empresaFB._addedBlocks.retVal;
    return empresaFB;
  }
}
// endregion EmpresaField

// region EmpresaFilterBuilder
class EmpresaFilterBuilder extends SearchCriteria {
  EmpresaFilterBuilder(Empresa obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Empresa _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  EmpresaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  EmpresaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  EmpresaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  EmpresaFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  EmpresaFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  EmpresaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  EmpresaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  EmpresaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  EmpresaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  EmpresaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  EmpresaFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  EmpresaField setField(EmpresaField field, String colName, DbType dbtype) {
    return EmpresaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  EmpresaField _id;
  EmpresaField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  EmpresaField _apiId;
  EmpresaField get apiId {
    return _apiId = setField(_apiId, 'apiId', DbType.integer);
  }

  EmpresaField _nome;
  EmpresaField get nome {
    return _nome = setField(_nome, 'nome', DbType.text);
  }

  EmpresaField _nomeFantasia;
  EmpresaField get nomeFantasia {
    return _nomeFantasia = setField(_nomeFantasia, 'nomeFantasia', DbType.text);
  }

  EmpresaField _ondeProcuraContato;
  EmpresaField get ondeProcuraContato {
    return _ondeProcuraContato =
        setField(_ondeProcuraContato, 'ondeProcuraContato', DbType.integer);
  }

  EmpresaField _ondeProcuraProduto;
  EmpresaField get ondeProcuraProduto {
    return _ondeProcuraProduto =
        setField(_ondeProcuraProduto, 'ondeProcuraProduto', DbType.integer);
  }

  EmpresaField _dataCadastro;
  EmpresaField get dataCadastro {
    return _dataCadastro = setField(_dataCadastro, 'dataCadastro', DbType.text);
  }

  EmpresaField _dataAtualizacao;
  EmpresaField get dataAtualizacao {
    return _dataAtualizacao =
        setField(_dataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  EmpresaField _dataDeletado;
  EmpresaField get dataDeletado {
    return _dataDeletado = setField(_dataDeletado, 'dataDeletado', DbType.text);
  }

  EmpresaField _isSelected;
  EmpresaField get isSelected {
    return _isSelected = setField(_isSelected, 'isSelected', DbType.bool);
  }

  EmpresaField _isDeleted;
  EmpresaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Empresa._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Empresa> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Empresa._softDeleteActivated && !hardDelete) {
      r = await _obj._mnEmpresa.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnEmpresa.delete(qparams);
    }
    return r;
  }

  /// Recover List<Empresa> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Empresa bulk invoked');
    return _obj._mnEmpresa.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from empresa ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnEmpresa.updateBatch(qparams, values);
  }

  /// This method always returns Empresa Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Empresa>
  Future<Empresa> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnEmpresa.toList(qparams);
    final data = await objFuture;
    Empresa obj;
    if (data.isNotEmpty) {
      obj = Empresa.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Empresa]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) empresaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final empresasFuture = await _obj._mnEmpresa.toList(qparams);
    final int count = empresasFuture[0]['CNT'] as int;
    if (empresaCount != null) {
      empresaCount(count);
    }
    return count;
  }

  /// This method returns List<Empresa> [Empresa]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Empresa>
  Future<List<Empresa>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Empresa> empresasData = await Empresa.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return empresasData;
  }

  /// This method returns Json String [Empresa]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Empresa]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Empresa]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnEmpresa.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Empresa]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM empresa WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnEmpresa.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Empresa]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnEmpresa.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Empresa.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnEmpresa.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion EmpresaFilterBuilder

// region EmpresaFields
class EmpresaFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fApiId;
  static TableField get apiId {
    return _fApiId =
        _fApiId ?? SqlSyntax.setField(_fApiId, 'apiId', DbType.integer);
  }

  static TableField _fNome;
  static TableField get nome {
    return _fNome = _fNome ?? SqlSyntax.setField(_fNome, 'nome', DbType.text);
  }

  static TableField _fNomeFantasia;
  static TableField get nomeFantasia {
    return _fNomeFantasia = _fNomeFantasia ??
        SqlSyntax.setField(_fNomeFantasia, 'nomeFantasia', DbType.text);
  }

  static TableField _fOndeProcuraContato;
  static TableField get ondeProcuraContato {
    return _fOndeProcuraContato = _fOndeProcuraContato ??
        SqlSyntax.setField(
            _fOndeProcuraContato, 'ondeProcuraContato', DbType.integer);
  }

  static TableField _fOndeProcuraProduto;
  static TableField get ondeProcuraProduto {
    return _fOndeProcuraProduto = _fOndeProcuraProduto ??
        SqlSyntax.setField(
            _fOndeProcuraProduto, 'ondeProcuraProduto', DbType.integer);
  }

  static TableField _fDataCadastro;
  static TableField get dataCadastro {
    return _fDataCadastro = _fDataCadastro ??
        SqlSyntax.setField(_fDataCadastro, 'dataCadastro', DbType.text);
  }

  static TableField _fDataAtualizacao;
  static TableField get dataAtualizacao {
    return _fDataAtualizacao = _fDataAtualizacao ??
        SqlSyntax.setField(_fDataAtualizacao, 'dataAtualizacao', DbType.text);
  }

  static TableField _fDataDeletado;
  static TableField get dataDeletado {
    return _fDataDeletado = _fDataDeletado ??
        SqlSyntax.setField(_fDataDeletado, 'dataDeletado', DbType.text);
  }

  static TableField _fIsSelected;
  static TableField get isSelected {
    return _fIsSelected = _fIsSelected ??
        SqlSyntax.setField(_fIsSelected, 'isSelected', DbType.bool);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion EmpresaFields

//region EmpresaManager
class EmpresaManager extends SqfEntityProvider {
  EmpresaManager()
      : super(OfflineDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'empresa';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion EmpresaManager
// region Controle
class Controle {
  Controle({this.id, this.operacaoId, this.dataControle, this.isDeleted}) {
    _setDefaultValues();
  }
  Controle.withFields(
      this.id, this.operacaoId, this.dataControle, this.isDeleted) {
    _setDefaultValues();
  }
  Controle.withId(this.id, this.operacaoId, this.dataControle, this.isDeleted) {
    _setDefaultValues();
  }
  Controle.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['operacaoId'] != null) {
      operacaoId = int.tryParse(o['operacaoId'].toString());
    }
    if (o['dataControle'] != null) {
      dataControle = o['dataControle'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Controle)
  int id;
  int operacaoId;
  String dataControle;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Controle)

  static const bool _softDeleteActivated = true;
  ControleManager __mnControle;

  ControleManager get _mnControle {
    return __mnControle = __mnControle ?? ControleManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (operacaoId != null) {
      map['operacaoId'] = operacaoId;
    }

    if (dataControle != null) {
      map['dataControle'] = dataControle;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (operacaoId != null) {
      map['operacaoId'] = operacaoId;
    }

    if (dataControle != null) {
      map['dataControle'] = dataControle;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Controle]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Controle]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, operacaoId, dataControle, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, operacaoId, dataControle, isDeleted];
  }

  static Future<List<Controle>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Controle.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Controle>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Controle>[];
    try {
      objList = list
          .map((controle) => Controle.fromMap(controle as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Controle.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Controle>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Controle> objList = <Controle>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Controle.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Controle by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Controle if exist, otherwise returns null
  Future<Controle> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Controle obj;
    final data = await _mnControle.getById([id]);
    if (data.length != 0) {
      obj = Controle.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Controle) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnControle.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnControle.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Controle> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Controle> controles) async {
    // final results = _mnControle.saveAll('INSERT OR REPLACE INTO controle (id,operacaoId, dataControle,isDeleted)  VALUES (?,?,?,?)',controles);
    // return results; removed in sqfentity_gen 1.3.0+6
    await OfflineDbModel().batchStart();
    for (final obj in controles) {
      await obj.save();
    }
    //    return OfflineDbModel().batchCommit();
    final result = await OfflineDbModel().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnControle.rawInsert(
              'INSERT OR REPLACE INTO controle (id,operacaoId, dataControle,isDeleted)  VALUES (?,?,?,?)',
              [id, operacaoId, dataControle, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Controle id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Controle id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Controle Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Controle>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Controle> controles) async {
    final results = await _mnControle.rawInsertAll(
        'INSERT OR REPLACE INTO controle (id,operacaoId, dataControle,isDeleted)  VALUES (?,?,?,?)',
        controles);
    return results;
  }

  /// Deletes Controle

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Controle invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnControle
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnControle.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Controle>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Controle invoked (id=$id)');
    {
      return _mnControle.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ControleFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ControleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ControleFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ControleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    operacaoId = operacaoId ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion controle

// region ControleField
class ControleField extends SearchCriteria {
  ControleField(this.controleFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ControleFilterBuilder controleFB;

  ControleField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ControleFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param, SqlSyntax.EQuals,
            controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param, SqlSyntax.NotEQuals,
            controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.EQualsOrNull, controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder isNull() {
    controleFB._addedBlocks = setCriteria(
        0,
        controleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      controleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          controleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          controleFB._addedBlocks);
      _waitingNot = '';
      controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
          controleFB._addedBlocks.retVal;
    }
    return controleFB;
  }

  ControleFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      controleFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          controleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          controleFB._addedBlocks);
      _waitingNot = '';
      controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
          controleFB._addedBlocks.retVal;
      controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
          controleFB._addedBlocks.retVal;
    }
    return controleFB;
  }

  ControleFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      controleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          controleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          controleFB._addedBlocks);
      _waitingNot = '';
      controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
          controleFB._addedBlocks.retVal;
    }
    return controleFB;
  }

  ControleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      controleFB._addedBlocks = setCriteria(
          pFirst,
          controleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          controleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        controleFB._addedBlocks = setCriteria(pFirst, controleFB.parameters,
            param, SqlSyntax.LessThan, controleFB._addedBlocks);
      } else {
        controleFB._addedBlocks = setCriteria(pFirst, controleFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, controleFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        controleFB._addedBlocks = setCriteria(pLast, controleFB.parameters,
            param, SqlSyntax.GreaterThan, controleFB._addedBlocks);
      } else {
        controleFB._addedBlocks = setCriteria(pLast, controleFB.parameters,
            param, SqlSyntax.LessThanOrEquals, controleFB._addedBlocks);
      }
    }
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.GreaterThan, controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param, SqlSyntax.LessThan,
            controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param, SqlSyntax.LessThan,
            controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    controleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, controleFB._addedBlocks)
        : setCriteria(pValue, controleFB.parameters, param,
            SqlSyntax.GreaterThan, controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }

  ControleFilterBuilder inValues(dynamic pValue) {
    controleFB._addedBlocks = setCriteria(
        pValue,
        controleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        controleFB._addedBlocks);
    _waitingNot = '';
    controleFB._addedBlocks.needEndBlock[controleFB._blockIndex] =
        controleFB._addedBlocks.retVal;
    return controleFB;
  }
}
// endregion ControleField

// region ControleFilterBuilder
class ControleFilterBuilder extends SearchCriteria {
  ControleFilterBuilder(Controle obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Controle _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ControleFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ControleFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ControleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ControleFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ControleFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ControleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ControleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ControleFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ControleFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ControleFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ControleFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ControleField setField(ControleField field, String colName, DbType dbtype) {
    return ControleField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ControleField _id;
  ControleField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ControleField _operacaoId;
  ControleField get operacaoId {
    return _operacaoId = setField(_operacaoId, 'operacaoId', DbType.integer);
  }

  ControleField _dataControle;
  ControleField get dataControle {
    return _dataControle = setField(_dataControle, 'dataControle', DbType.text);
  }

  ControleField _isDeleted;
  ControleField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Controle._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Controle> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Controle._softDeleteActivated && !hardDelete) {
      r = await _obj._mnControle.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnControle.delete(qparams);
    }
    return r;
  }

  /// Recover List<Controle> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Controle bulk invoked');
    return _obj._mnControle.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from controle ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnControle.updateBatch(qparams, values);
  }

  /// This method always returns Controle Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Controle>
  Future<Controle> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnControle.toList(qparams);
    final data = await objFuture;
    Controle obj;
    if (data.isNotEmpty) {
      obj = Controle.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Controle]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) controleCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final controlesFuture = await _obj._mnControle.toList(qparams);
    final int count = controlesFuture[0]['CNT'] as int;
    if (controleCount != null) {
      controleCount(count);
    }
    return count;
  }

  /// This method returns List<Controle> [Controle]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Controle>
  Future<List<Controle>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Controle> controlesData = await Controle.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return controlesData;
  }

  /// This method returns Json String [Controle]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Controle]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Controle]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnControle.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Controle]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM controle WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnControle.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Controle]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnControle.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Controle.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnControle.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ControleFilterBuilder

// region ControleFields
class ControleFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fOperacaoId;
  static TableField get operacaoId {
    return _fOperacaoId = _fOperacaoId ??
        SqlSyntax.setField(_fOperacaoId, 'operacaoId', DbType.integer);
  }

  static TableField _fDataControle;
  static TableField get dataControle {
    return _fDataControle = _fDataControle ??
        SqlSyntax.setField(_fDataControle, 'dataControle', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ControleFields

//region ControleManager
class ControleManager extends SqfEntityProvider {
  ControleManager()
      : super(OfflineDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'controle';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ControleManager
// region Agendador
class Agendador {
  Agendador({this.id, this.operacaoId, this.dataCron, this.isDeleted}) {
    _setDefaultValues();
  }
  Agendador.withFields(this.operacaoId, this.dataCron, this.isDeleted) {
    _setDefaultValues();
  }
  Agendador.withId(this.id, this.operacaoId, this.dataCron, this.isDeleted) {
    _setDefaultValues();
  }
  Agendador.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['operacaoId'] != null) {
      operacaoId = int.tryParse(o['operacaoId'].toString());
    }
    if (o['dataCron'] != null) {
      dataCron = o['dataCron'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Agendador)
  int id;
  int operacaoId;
  String dataCron;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Agendador)

  static const bool _softDeleteActivated = true;
  AgendadorManager __mnAgendador;

  AgendadorManager get _mnAgendador {
    return __mnAgendador = __mnAgendador ?? AgendadorManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (operacaoId != null) {
      map['operacaoId'] = operacaoId;
    }

    if (dataCron != null) {
      map['dataCron'] = dataCron;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (operacaoId != null) {
      map['operacaoId'] = operacaoId;
    }

    if (dataCron != null) {
      map['dataCron'] = dataCron;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Agendador]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Agendador]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [operacaoId, dataCron, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, operacaoId, dataCron, isDeleted];
  }

  static Future<List<Agendador>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Agendador.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Agendador>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Agendador>[];
    try {
      objList = list
          .map((agendador) =>
              Agendador.fromMap(agendador as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Agendador.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Agendador>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Agendador> objList = <Agendador>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Agendador.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Agendador by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Agendador if exist, otherwise returns null
  Future<Agendador> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Agendador obj;
    final data = await _mnAgendador.getById([id]);
    if (data.length != 0) {
      obj = Agendador.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Agendador) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnAgendador.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAgendador.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Agendador> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Agendador> agendadors) async {
    // final results = _mnAgendador.saveAll('INSERT OR REPLACE INTO agendador (id, operacaoId, dataCron,isDeleted)  VALUES (?,?,?,?)',agendadors);
    // return results; removed in sqfentity_gen 1.3.0+6
    await OfflineDbModel().batchStart();
    for (final obj in agendadors) {
      await obj.save();
    }
    //    return OfflineDbModel().batchCommit();
    final result = await OfflineDbModel().batchCommit();
    for (int i = 0; i < agendadors.length; i++) {
      if (agendadors[i].id == null) {
        agendadors[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnAgendador.rawInsert(
              'INSERT OR REPLACE INTO agendador (id, operacaoId, dataCron,isDeleted)  VALUES (?,?,?,?)',
              [id, operacaoId, dataCron, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Agendador id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Agendador id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Agendador Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Agendador>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Agendador> agendadors) async {
    final results = await _mnAgendador.rawInsertAll(
        'INSERT OR REPLACE INTO agendador (id, operacaoId, dataCron,isDeleted)  VALUES (?,?,?,?)',
        agendadors);
    return results;
  }

  /// Deletes Agendador

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Agendador invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnAgendador
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAgendador.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Agendador>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Agendador invoked (id=$id)');
    {
      return _mnAgendador.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  AgendadorFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return AgendadorFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  AgendadorFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return AgendadorFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    operacaoId = operacaoId ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion agendador

// region AgendadorField
class AgendadorField extends SearchCriteria {
  AgendadorField(this.agendadorFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  AgendadorFilterBuilder agendadorFB;

  AgendadorField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  AgendadorFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param, SqlSyntax.EQuals,
            agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.NotEQuals, agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.EQualsOrNull, agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder isNull() {
    agendadorFB._addedBlocks = setCriteria(
        0,
        agendadorFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      agendadorFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          agendadorFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          agendadorFB._addedBlocks);
      _waitingNot = '';
      agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
          agendadorFB._addedBlocks.retVal;
    }
    return agendadorFB;
  }

  AgendadorFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      agendadorFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          agendadorFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          agendadorFB._addedBlocks);
      _waitingNot = '';
      agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
          agendadorFB._addedBlocks.retVal;
      agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
          agendadorFB._addedBlocks.retVal;
    }
    return agendadorFB;
  }

  AgendadorFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      agendadorFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          agendadorFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          agendadorFB._addedBlocks);
      _waitingNot = '';
      agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
          agendadorFB._addedBlocks.retVal;
    }
    return agendadorFB;
  }

  AgendadorFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      agendadorFB._addedBlocks = setCriteria(
          pFirst,
          agendadorFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          agendadorFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        agendadorFB._addedBlocks = setCriteria(pFirst, agendadorFB.parameters,
            param, SqlSyntax.LessThan, agendadorFB._addedBlocks);
      } else {
        agendadorFB._addedBlocks = setCriteria(pFirst, agendadorFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, agendadorFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        agendadorFB._addedBlocks = setCriteria(pLast, agendadorFB.parameters,
            param, SqlSyntax.GreaterThan, agendadorFB._addedBlocks);
      } else {
        agendadorFB._addedBlocks = setCriteria(pLast, agendadorFB.parameters,
            param, SqlSyntax.LessThanOrEquals, agendadorFB._addedBlocks);
      }
    }
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.GreaterThan, agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.LessThanOrEquals, agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param, SqlSyntax.LessThan,
            agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param, SqlSyntax.LessThan,
            agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    agendadorFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.LessThanOrEquals, agendadorFB._addedBlocks)
        : setCriteria(pValue, agendadorFB.parameters, param,
            SqlSyntax.GreaterThan, agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }

  AgendadorFilterBuilder inValues(dynamic pValue) {
    agendadorFB._addedBlocks = setCriteria(
        pValue,
        agendadorFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        agendadorFB._addedBlocks);
    _waitingNot = '';
    agendadorFB._addedBlocks.needEndBlock[agendadorFB._blockIndex] =
        agendadorFB._addedBlocks.retVal;
    return agendadorFB;
  }
}
// endregion AgendadorField

// region AgendadorFilterBuilder
class AgendadorFilterBuilder extends SearchCriteria {
  AgendadorFilterBuilder(Agendador obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Agendador _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  AgendadorFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  AgendadorFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  AgendadorFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  AgendadorFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  AgendadorFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  AgendadorFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  AgendadorFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AgendadorFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AgendadorFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AgendadorFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AgendadorFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  AgendadorField setField(AgendadorField field, String colName, DbType dbtype) {
    return AgendadorField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  AgendadorField _id;
  AgendadorField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  AgendadorField _operacaoId;
  AgendadorField get operacaoId {
    return _operacaoId = setField(_operacaoId, 'operacaoId', DbType.integer);
  }

  AgendadorField _dataCron;
  AgendadorField get dataCron {
    return _dataCron = setField(_dataCron, 'dataCron', DbType.text);
  }

  AgendadorField _isDeleted;
  AgendadorField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Agendador._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Agendador> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Agendador._softDeleteActivated && !hardDelete) {
      r = await _obj._mnAgendador.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnAgendador.delete(qparams);
    }
    return r;
  }

  /// Recover List<Agendador> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Agendador bulk invoked');
    return _obj._mnAgendador.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from agendador ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnAgendador.updateBatch(qparams, values);
  }

  /// This method always returns Agendador Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Agendador>
  Future<Agendador> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnAgendador.toList(qparams);
    final data = await objFuture;
    Agendador obj;
    if (data.isNotEmpty) {
      obj = Agendador.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Agendador]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) agendadorCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final agendadorsFuture = await _obj._mnAgendador.toList(qparams);
    final int count = agendadorsFuture[0]['CNT'] as int;
    if (agendadorCount != null) {
      agendadorCount(count);
    }
    return count;
  }

  /// This method returns List<Agendador> [Agendador]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Agendador>
  Future<List<Agendador>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Agendador> agendadorsData = await Agendador.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return agendadorsData;
  }

  /// This method returns Json String [Agendador]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Agendador]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Agendador]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnAgendador.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Agendador]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM agendador WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnAgendador.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Agendador]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnAgendador.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Agendador.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnAgendador.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AgendadorFilterBuilder

// region AgendadorFields
class AgendadorFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fOperacaoId;
  static TableField get operacaoId {
    return _fOperacaoId = _fOperacaoId ??
        SqlSyntax.setField(_fOperacaoId, 'operacaoId', DbType.integer);
  }

  static TableField _fDataCron;
  static TableField get dataCron {
    return _fDataCron =
        _fDataCron ?? SqlSyntax.setField(_fDataCron, 'dataCron', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion AgendadorFields

//region AgendadorManager
class AgendadorManager extends SqfEntityProvider {
  AgendadorManager()
      : super(OfflineDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'agendador';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion AgendadorManager
class OfflineDbModelSequenceManager extends SqfEntityProvider {
  OfflineDbModelSequenceManager() : super(OfflineDbModel());
}
// END OF ENTITIES
